var test = require('tape');
var arraydiff = require('arraydiff');
var Clusterer = require('./');

// Typically you'd get this as ImageData.data.
var input = [254, 255, 255, 255, 235, 235, 235, 255, 213, 213, 213, 255, 197, 0, 0, 255, 179, 179, 179, 255, 179, 179, 179, 255, 42, 78, 182, 255, 42, 78, 182, 255, 42, 78, 182, 255, 0, 185, 50, 255, 0, 185, 50, 255];
var palette3 = [
  0, 0, 0, 255,
  1, 1, 1, 255,
  2, 2, 2, 255
]
var palette4 = [
  0, 0, 0, 255,
  1, 1, 1, 255,
  2, 2, 2, 255,
  3, 3, 3, 255
]
var palette6 = [
  0, 0, 0, 255,
  1, 1, 1, 255,
  2, 2, 2, 255,
  3, 3, 3, 255,
  4, 4, 4, 255,
  5, 5, 5, 255
]
var paletteGB =  [
  0, 60, 16, 255,
  6, 103, 49, 255,
  123, 180, 0, 255,
  138, 196, 0, 255
]

test('Clusterer: makes 4 clusters', function(t) {
  var c = new Clusterer(input);

  c.solve(
    function progress(iterationCount) {},
    function complete(iterationCount) {
      t.ok(iterationCount > 0, 'took more than one iteration to converge');

      var output = c.applyPalette(palette4);
      t.deepEqual(output, new Uint8ClampedArray([
        3, 3, 3, 255,
        3, 3, 3, 255,
        3, 3, 3, 255,
        1, 1, 1, 255,
        3, 3, 3, 255,
        3, 3, 3, 255,
        2, 2, 2, 255,
        2, 2, 2, 255,
        2, 2, 2, 255,
        1, 1, 1, 255,
        1, 1, 1, 255
      ]))

      t.end();
    }
  )
})

test('Clusterer: makes 6 clusters', function(t) {
  var c = new Clusterer(input, {clusters: 6});

  c.solve(
    function progress(iterationCount) {},
    function complete(iterationCount) {
      t.ok(iterationCount > 0, 'took more than one iteration to converge');

      var output = Array.apply([], c.applyPalette(palette6));
      var expected = [
        5, 5, 5, 255,
        5, 5, 5, 255,
        5, 5, 5, 255,
        2, 2, 2, 255,
        4, 4, 4, 255,
        4, 4, 4, 255,
        2, 2, 2, 255,
        2, 2, 2, 255,
        2, 2, 2, 255,
        2, 2, 2, 255,
        2, 2, 2, 255
      ];

      var expectedClusters = [
        [0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0],
        [12,24,28,32,36,40,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0],
        [16,20,0,0,0,0,0,0,0,0,0],
        [0,4,8,0,0,0,0,0,0,0,0]
      ];

      c.clusters.forEach(function(cluster, i) {
        t.deepEqual(Array.apply([], cluster.data), expectedClusters[i],
          'Cluster ' + i + ' has expected pixel offsets');
      })

      t.deepEqual(output, expected, 'pixel data matches')
      t.end();
    }
  )
})

test('kirby clusters', function(t) {
  var input = [0,0,0,0,0,0,0,0,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,0,0,0,0,0,0,0,0,0,0,0,0,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,0,0,0,0,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,196,101,104,255,196,101,104,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,0,0,0,0,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,0,0,0,0,0,0,0,0,0,0,0,0,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,249,208,208,255,0,0,0,0,0,0,0,0]
  var clusters = [
    [0,4,56,60,64,124,896,956,960,964,1016,1020,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [268,272,300,304,332,336,364,368,396,400,428,432,460,464,492,496,524,528,556,560,728,732,736,740,796,800,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [8,12,16,20,24,28,32,36,40,44,48,52,68,72,76,80,84,88,92,96,100,104,108,112,116,120,128,132,136,140,144,148,152,156,160,164,168,172,176,180,184,188,192,196,200,204,208,212,216,220,224,228,232,236,240,244,248,252,256,260,264,276,280,284,288,292,296,308,312,316,320,324,328,340,344,348,352,356,360,372,376,380,384,388,392,404,408,412,416,420,424,436,440,444,448,452,456,468,472,476,480,484,488,500,504,508,512,516,520,532,536,540,544,548,552,564,568,572,576,580,584,588,592,596,600,604,608,612,616,620,624,628,632,636,640,644,648,652,656,660,664,668,672,676,680,684,688,692,696,700,704,708,712,716,720,724,744,748,752,756,760,764,768,772,776,780,784,788,792,804,808,812,816,820,824,828,832,836,840,844,848,852,856,860,864,868,872,876,880,884,888,892,900,904,908,912,916,920,924,928,932,936,940,944,948,952,968,972,976,980,984,988,992,996,1000,1004,1008,1012,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
  ]
  var expected = [0,60,16,255,0,60,16,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,0,60,16,255,0,60,16,255,0,60,16,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,0,60,16,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,123,180,0,255,123,180,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,0,60,16,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,0,60,16,255,0,60,16,255,0,60,16,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,138,196,0,255,0,60,16,255,0,60,16,255];

  var c = new Clusterer(input);
  c.solve(function(){}, function(count) {
    var output = Array.apply([], c.applyPalette(paletteGB));
    t.deepEqual(output, expected, 'pixel data matches');
    t.equal(arraydiff(output, expected).length, 0, 'no diffs');
    t.end();
  })
})